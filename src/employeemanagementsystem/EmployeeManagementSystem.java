package employeemanagementsystem;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author Hillol Talukdar
 * ID    : 181-115-029
 * Batch : CSE(44th) 
 * 
 */


public class EmployeeManagementSystem extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeManagementSystem
     */
    private String employeeId;
    private String firstName;
    private String lastName;
    private String dateofBirth;
    private String bdDate;
    private String bdMonth;
    private String bdYear;
    private String gender;
    private String joined;
    private String joinedDate;
    private String joinedMonth;
    private String joinedYear;
    private int days;
    private int day;
    private int month;
    private int year;
    private String salary;
    private String[] rows;
    private DefaultTableModel model;
    private JFrame frame;
    
    CreateFile fileCheck;
    CreateTempFile createTempFile;

    File file,tempFile;

    public EmployeeManagementSystem()
    {
        fileCheck = new CreateFile();
        
        file = fileCheck.getFile();

        initComponents();
        
        loadGenderComboBox();
        
        jTableSorter();
        
        read();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        firstNameJLabel = new javax.swing.JLabel();
        employeeIDJLabel = new javax.swing.JLabel();
        dateOfBirthJLabel = new javax.swing.JLabel();
        genderJLabel = new javax.swing.JLabel();
        lastNameJLabel = new javax.swing.JLabel();
        joinedDateJLabel = new javax.swing.JLabel();
        salaryJLabel = new javax.swing.JLabel();
        lastNamejTextField = new javax.swing.JTextField();
        employeeIDjTextField = new javax.swing.JTextField();
        firstNamejTextField = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        add = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        salaryJSpinner = new javax.swing.JSpinner();
        bdYearJSpinner = new javax.swing.JSpinner();
        joinedDateJSpinner = new javax.swing.JSpinner();
        bdMonthJSpinner = new javax.swing.JSpinner();
        bdDateJSpinner = new javax.swing.JSpinner();
        joinedMonthJSpinner = new javax.swing.JSpinner();
        joinedYearJSpinner = new javax.swing.JSpinner();
        genderJComboBox = new javax.swing.JComboBox<>();
        searchJTextField = new javax.swing.JTextField();
        searchJLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee Management System");
        setBackground(new java.awt.Color(0, 153, 153));
        setFocusTraversalPolicyProvider(true);
        setForeground(new java.awt.Color(0, 153, 153));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Employee Management System");

        firstNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        firstNameJLabel.setForeground(new java.awt.Color(153, 0, 0));
        firstNameJLabel.setText("First Name");

        employeeIDJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        employeeIDJLabel.setForeground(new java.awt.Color(153, 0, 0));
        employeeIDJLabel.setText("Employee ID");

        dateOfBirthJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        dateOfBirthJLabel.setForeground(new java.awt.Color(153, 0, 0));
        dateOfBirthJLabel.setText("Date of Birth");

        genderJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        genderJLabel.setForeground(new java.awt.Color(153, 0, 0));
        genderJLabel.setText("Gender");

        lastNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lastNameJLabel.setForeground(new java.awt.Color(153, 0, 0));
        lastNameJLabel.setText("Last Name");

        joinedDateJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        joinedDateJLabel.setForeground(new java.awt.Color(153, 0, 0));
        joinedDateJLabel.setText("Joined Date");

        salaryJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        salaryJLabel.setForeground(new java.awt.Color(153, 0, 0));
        salaryJLabel.setText("Salary(BDT)");

        lastNamejTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        employeeIDjTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        firstNamejTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        firstNamejTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNamejTextFieldActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        update.setForeground(new java.awt.Color(153, 0, 0));
        update.setText("Update");
        update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        add.setForeground(new java.awt.Color(153, 0, 0));
        add.setText("Add");
        add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clear.setForeground(new java.awt.Color(153, 0, 0));
        clear.setText("Clear");
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        exit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        exit.setForeground(new java.awt.Color(153, 0, 0));
        exit.setText("Exit");
        exit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 102, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Gender", "Date of Birth", "Joined date", "Salary (BDT)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTable1.setGridColor(new java.awt.Color(153, 153, 153));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        delete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete.setForeground(new java.awt.Color(153, 0, 0));
        delete.setText("Delete");
        delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        salaryJSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        salaryJSpinner.setModel(new javax.swing.SpinnerNumberModel(10000, 10000, 100000, 1));
        salaryJSpinner.setToolTipText("");
        salaryJSpinner.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        bdYearJSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bdYearJSpinner.setModel(new javax.swing.SpinnerNumberModel(1984, 1959, 1994, 1));
        bdYearJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bdYearJSpinnerStateChanged(evt);
            }
        });

        joinedDateJSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        joinedDateJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));

        bdMonthJSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bdMonthJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        bdMonthJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bdMonthJSpinnerStateChanged(evt);
            }
        });

        bdDateJSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bdDateJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));

        joinedMonthJSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        joinedMonthJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        joinedMonthJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                joinedMonthJSpinnerStateChanged(evt);
            }
        });

        joinedYearJSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        joinedYearJSpinner.setModel(new javax.swing.SpinnerNumberModel(2019, 1984, 2019, 1));
        joinedYearJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                joinedYearJSpinnerStateChanged(evt);
            }
        });

        genderJComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        genderJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderJComboBoxActionPerformed(evt);
            }
        });

        searchJTextField.setToolTipText("");
        searchJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchJTextFieldKeyReleased(evt);
            }
        });

        searchJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchJLabel.setForeground(new java.awt.Color(153, 0, 0));
        searchJLabel.setText("Search");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("(dd/mm/yyyy)");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 102));
        jLabel3.setText("Made by Hillol Talukdar");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("(dd/mm/yyyy)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeIDJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateOfBirthJLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salaryJLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(joinedDateJLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81)
                                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87)
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(82, 82, 82)
                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bdDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(joinedDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bdMonthJSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(joinedMonthJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(joinedYearJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                            .addComponent(bdYearJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lastNamejTextField)
                                        .addComponent(firstNamejTextField)
                                        .addComponent(employeeIDjTextField)
                                        .addComponent(salaryJSpinner, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(genderJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(71, 71, 71))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(employeeIDJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(employeeIDjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firstNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lastNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(firstNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genderJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bdDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bdMonthJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bdYearJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateOfBirthJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(joinedDateJLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(joinedMonthJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(joinedDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(joinedYearJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(salaryJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salaryJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstNamejTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNamejTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNamejTextFieldActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
        // this.setResizable(false);
        this.setSize(1400, 750);
      //this.getContentPane().setBackground(java.awt.Color.DARK_GRAY);
    }//GEN-LAST:event_formWindowActivated

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        frame = new JFrame("Exit");

        if (JOptionPane.showConfirmDialog(frame, "Confirm if you want to exit", "Employee Management System", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed

       clear();

    }//GEN-LAST:event_clearActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed

        model = (DefaultTableModel) jTable1.getModel();
        
        rows = new String[8];
        
        employeeId = employeeIDjTextField.getText();
        firstName = firstNamejTextField.getText();
        lastName =  lastNamejTextField.getText();
        gender = genderJComboBox.getSelectedItem().toString();
       
        bdDate = bdDateJSpinner.getValue().toString();
        bdMonth = bdMonthJSpinner.getValue().toString();
        bdYear = bdYearJSpinner.getValue().toString();
        
        int bday= Integer.parseInt(bdDate);
        int bmonth = Integer.parseInt(bdMonth);
        int byear = Integer.parseInt(bdYear);
        
        Date date = new Date(bmonth, byear);
      
        boolean checkBDLeapYear = date.checkLeapYear();
        
        
        dateofBirth = bdDate + "/" + bdMonth + "/" + bdYear;
        
        joinedDate = joinedDateJSpinner.getValue().toString();
        joinedMonth = joinedMonthJSpinner.getValue().toString();
        joinedYear = joinedYearJSpinner.getValue().toString();
        
        int jday= Integer.parseInt( joinedDate);
        int jmonth = Integer.parseInt(joinedMonth);
        int jyear = Integer.parseInt(joinedYear);
        
        
        Date date2 = new Date(jmonth, jyear);
        boolean checkJLeapYear = date2.checkLeapYear();
        
        joined = joinedDate + "/" + joinedMonth + "/" + joinedYear;
        
        
        salary = salaryJSpinner.getValue().toString();
        
        if(employeeId.isEmpty() || firstName.isEmpty() || lastName.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Some Field is still Empty", "Warning", JOptionPane.WARNING_MESSAGE);
        }

        else
        { 
            boolean id= checkSpace(employeeId);
            boolean fn=checkSpace(firstName);
            boolean ln=checkSpace(lastName);

            if(id==true || fn==true || ln==true)
            {
                JOptionPane.showMessageDialog(null, "'Employee ID', 'First Name', 'Last Name' fields must be a filled with a word", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            
            else if(idExits(employeeId)==true)
            {
                JOptionPane.showMessageDialog(null, "'Employee ID' already exits", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            
            else if(checkBDLeapYear==true && bmonth==2 && bday>29)
            {
                JOptionPane.showMessageDialog(null, "Invalid Birth date", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(checkBDLeapYear==false && bday>date.getDays(bmonth))
            {
                JOptionPane.showMessageDialog(null, "Invalid Birth date or month", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            
            else if(checkJLeapYear==true && jmonth==2 && jday>29)
            {
                JOptionPane.showMessageDialog(null, "Invalid Joined date", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(checkJLeapYear==false && jday>date2.getDays(jmonth))
            {
                JOptionPane.showMessageDialog(null, "Invalid Joined date or month", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            
            else if( (jyear-byear <25 ) || (jyear-byear>60) )
            {
                JOptionPane.showMessageDialog(null, "Invalid age.\nAge must be between 25 to 60 years.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            
             
            else
            {
                write();                      
            }          
        }
    }//GEN-LAST:event_addActionPerformed

    private void genderJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderJComboBoxActionPerformed

    private void bdMonthJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bdMonthJSpinnerStateChanged

    }//GEN-LAST:event_bdMonthJSpinnerStateChanged

    private void bdYearJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bdYearJSpinnerStateChanged

    }//GEN-LAST:event_bdYearJSpinnerStateChanged

    private void joinedMonthJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_joinedMonthJSpinnerStateChanged

    }//GEN-LAST:event_joinedMonthJSpinnerStateChanged

    private void joinedYearJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_joinedYearJSpinnerStateChanged

    }//GEN-LAST:event_joinedYearJSpinnerStateChanged

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        try
        {
            model = (DefaultTableModel) jTable1.getModel();
            
            int selectedRowIndex = jTable1.getSelectedRow();
            String id = jTable1.getValueAt(selectedRowIndex, 0).toString();
            
            model.removeRow(selectedRowIndex);

            deleteFromFile(id);
           
            while(model.getRowCount()>0)     
            {
                for(int i=0; i< model.getRowCount(); i++)
                {
                    model.removeRow(i);
                }
            }
           
            read();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "No row has been selected or row doesnot exits.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void searchJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchJTextFieldKeyReleased

        model = (DefaultTableModel) jTable1.getModel();

        String search = searchJTextField.getText();
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel> (model);
        jTable1.setRowSorter(sorter);

        sorter.setRowFilter(RowFilter.regexFilter(search));

    }//GEN-LAST:event_searchJTextFieldKeyReleased

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed

        try
        {
            model = (DefaultTableModel) jTable1.getModel();
            
            int selectedRowIndex = jTable1.getSelectedRow();

            employeeId = jTable1.getValueAt(selectedRowIndex, 0).toString();
            firstName = jTable1.getValueAt(selectedRowIndex, 1).toString();
            lastName = jTable1.getValueAt(selectedRowIndex, 2).toString();
            gender = jTable1.getValueAt(selectedRowIndex, 3).toString();
            dateofBirth = jTable1.getValueAt(selectedRowIndex, 4).toString();
            joined = jTable1.getValueAt(selectedRowIndex, 5).toString();
            salary = jTable1.getValueAt(selectedRowIndex, 6).toString();
           
            int sal = Integer.parseInt(salary);
           
            String dateofBirthSplit[] = dateofBirth.split("/");
            String joinedSplit[] = joined.split("/");
           
           int bdDate = Integer.parseInt(dateofBirthSplit[0]);
           int bdMonth = Integer.parseInt(dateofBirthSplit[1]);
           int  bdYear = Integer.parseInt(dateofBirthSplit[2]);
           
           int joinedDate = Integer.parseInt(joinedSplit[0]);
           int joinedMonth = Integer.parseInt(joinedSplit[1]);
           int joinedYear = Integer.parseInt(joinedSplit[2]);
           
            employeeIDjTextField.setText(employeeId);
            firstNamejTextField.setText(firstName);
            lastNamejTextField.setText(lastName);
           
            if(gender.equals("Female"))
            {
                genderJComboBox.setSelectedItem(SelectGender.Female);
            }
            else
            {
                genderJComboBox.setSelectedItem(SelectGender.Male);
            }
            
           
            bdDateJSpinner.setValue(bdDate);
            bdMonthJSpinner.setValue(bdMonth);
            bdYearJSpinner.setValue(bdYear);
           
            joinedDateJSpinner.setValue(joinedDate);
            joinedMonthJSpinner.setValue(joinedMonth);
            joinedYearJSpinner.setValue(joinedYear);
           
            salaryJSpinner.setValue(sal);
           
            model.removeRow(selectedRowIndex);
            deleteFromFile(employeeId);         
           
            while(model.getRowCount()>0)     
            {
                for(int i=0; i< model.getRowCount(); i++)
                {
                    model.removeRow(i);
                }
            }
            
            read();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "No row has been selected or row doesnot exits.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_updateActionPerformed

    
    private void clear()
    {
        employeeIDjTextField.setText(null);
        firstNamejTextField.setText(null);
        lastNamejTextField.setText(null);

        loadGenderComboBox();

        bdDateJSpinner.setValue(1);
        bdMonthJSpinner.setValue(1);
        bdYearJSpinner.setValue(1984);


        joinedDateJSpinner.setValue(1);
        joinedMonthJSpinner.setValue(1);
        joinedYearJSpinner.setValue(2019);

        salaryJSpinner.setValue(10000);
    }

    private boolean checkSpace(String s)
    {
        int i, len=s.length();
        char ch;
        
        for(i=0 ; i<len; i++)
        {
            ch= s.charAt(i);
            if(ch==' ')
                return true;
        }
        return false;
    }
    
    private boolean idExits(String id)
    {
        int size = jTable1.getRowCount();
        
        for(int i=0; i<size; i++)
        {
            String currentId = jTable1.getValueAt(i, 0).toString();
            
            if(id.equals(currentId))
                return true;
        }
        return false;
    }
    
    
    private void loadGenderComboBox() {
        genderJComboBox.setModel(new DefaultComboBoxModel<>(SelectGender.values()));
    }
    
    private void jTableSorter()
    {
        model = (DefaultTableModel) jTable1.getModel();
        
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel> (model);
        
        jTable1.setRowSorter(sorter);
    }
    
    private void read()
    {    
        try
        {     
            model = (DefaultTableModel) jTable1.getModel();
            
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            
            Object[] lines = bufferedReader.lines().toArray();

            for (Object line : lines) 
            {
                String[] row = line.toString().split(" ");
                model.addRow(row);
            }
            
            bufferedReader.close();
            fileReader.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e, "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void write()
    {
        try
        {     
            FileWriter fileWriter = new FileWriter(file,true);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); 
            PrintWriter printWriter = new PrintWriter(bufferedWriter);

            printWriter.println(employeeId+" "+ firstName+" "+ lastName+" "+ gender+" "+ dateofBirth+" "+ joined+" "+ salary);

            rows[0] = employeeId;
            rows[1] = firstName;
            rows[2] = lastName;
            rows[3] = gender;
            rows[4] = dateofBirth;
            rows[5] = joined;
            rows[6] = salary;

            model.addRow(rows);

            clear();

            printWriter.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e, "Warning", JOptionPane.WARNING_MESSAGE);
        } 
    }
    
    private void deleteFromFile(String id)
    {
        try
        {
            createTempFile = new CreateTempFile();
            
            tempFile = createTempFile.getFile();
            //tempFile = new File("temp.txt");
            
            FileWriter fileWriter = new FileWriter(tempFile,true);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); 
            PrintWriter printWriter = new PrintWriter(bufferedWriter);
            
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            
            String currentLine;
            String[] data;
            
            while((currentLine = bufferedReader.readLine()) != null)
            {
                data= currentLine.split(" ");
                
                if(! (data[0].equals(id)))
                {
                    printWriter.println(currentLine);
                }
            }
            
            printWriter.flush();
            printWriter.close();
            fileReader.close();
            bufferedReader.close();
            bufferedWriter.close();
            fileWriter.close();
            
            file.delete();
            
            file = fileCheck.getFile();
          
            
            tempFile.renameTo(file);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e, "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeManagementSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JSpinner bdDateJSpinner;
    private javax.swing.JSpinner bdMonthJSpinner;
    private javax.swing.JSpinner bdYearJSpinner;
    private javax.swing.JButton clear;
    private javax.swing.JLabel dateOfBirthJLabel;
    private javax.swing.JButton delete;
    private javax.swing.JLabel employeeIDJLabel;
    private javax.swing.JTextField employeeIDjTextField;
    private javax.swing.JButton exit;
    private javax.swing.JLabel firstNameJLabel;
    private javax.swing.JTextField firstNamejTextField;
    private javax.swing.JComboBox<SelectGender> genderJComboBox;
    private javax.swing.JLabel genderJLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel joinedDateJLabel;
    private javax.swing.JSpinner joinedDateJSpinner;
    private javax.swing.JSpinner joinedMonthJSpinner;
    private javax.swing.JSpinner joinedYearJSpinner;
    private javax.swing.JLabel lastNameJLabel;
    private javax.swing.JTextField lastNamejTextField;
    private javax.swing.JLabel salaryJLabel;
    private javax.swing.JSpinner salaryJSpinner;
    private javax.swing.JLabel searchJLabel;
    private javax.swing.JTextField searchJTextField;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
